akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["org.graysurf.util.logging.AkkaLogger"]

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream. It can perform
  # fine grained filtering based on the log source. The default
  # implementation filters on the `loglevel`.
  # FQCN of the LoggingFilter. The Class of the FQCN must implement
  # akka.event.LoggingFilter and have a public constructor with
  # (akka.actor.ActorSystem.Settings, akka.event.EventStream) parameters.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "INFO"

  # Log at info level when messages are sent to dead letters.
  # Possible values:
  # on: all dead letters are logged
  # off: no logging of dead letters
  # n: positive integer, number of dead letters that will be logged
  log-dead-letters = on
  log-dead-letters-during-shutdown = off

  # Don't terminate ActorSystem via CoordinatedShutdown
  #coordinated-shutdown.terminate-actor-system = off
  coordinated-shutdown.run-by-jvm-shutdown-hook = off
  #cluster.run-coordinated-shutdown-when-down = off

  actor {
    # FQCN of the ActorRefProvider to be used; the below is the built-in default,
    # another one is akka.remote.RemoteActorRefProvider in the akka-remote bundle.
    provider = "akka.actor.LocalActorRefProvider"
    #provider = "akka.remote.RemoteActorRefProvider"
    #provider = "akka.cluster.ClusterActorRefProvider"

    debug {
      # enable function of Actor.loggable(), which is to log any received message
      # at DEBUG level, see the “Testing Actor Systems” section of the Akka
      # Documentation at http://akka.io/docs
      receive = on

      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = on

      # enable DEBUG logging of actor lifecycle changes
      lifecycle = on

      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = on

      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = on

      # enable DEBUG logging of unhandled messages
      unhandled = on

      # enable WARN logging of misconfigured routers
      router-misconfiguration = on
    }
    default-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 4
        parallelism-factor = 2.0
        parallelism-max = 16
      }
    }
  }
}

dispatcher {

  account {
    type = "Dispatcher"
    executor = "fork-join-executor"
    thread-pool-executor {
      keep-alive-time = 5s
      fixed-pool-size = off

      core-pool-size-min = 1
      core-pool-size-factor = 3.0
      core-pool-size-max = 128

      max-pool-size-min = 128
      max-pool-size-factor = 5.0
      max-pool-size-max = 512

      task-queue-size = -1
      task-queue-type = "linked"
      allow-core-timeout = on
    }
  }

  ssh-operator {
    type = "Dispatcher"
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min = 3
      core-pool-size-factor = 2.0
      core-pool-size-max = 20
    }
    throughput = 1
  }

  gcp-compute {
    type = "Dispatcher"
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min = 3
      core-pool-size-factor = 2.0
      core-pool-size-max = 20
    }
    throughput = 1
  }

}

database {
  common {
    connectionTimeout = 60 seconds
    maxLifetime = 30 minutes
    idleTimeout = 5 minutes
    maxConnections = 32
    minConnections = 1
    numThreads = 16
    initializationFailFast = false
    registerMbeans = true
    connectionInitSql = "select 1"
    isolation = READ_UNCOMMITTED
  }

  rds_prod {
    profile = "slick.jdbc.PostgresProfile$"
    db = ${database.common}
    db {
      dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
      poolName = "aws_rds"
      numThreads = 4
      properties {
        serverName = "online-crm.c3oguoknq1nq.ap-northeast-1.rds.amazonaws.com"
        portNumber = 5432
        databaseName = "fbdb"
        user = "onlinecrm"
        password = "scalaocrm"
        applicationName = "OnlineCrm Crawler Mater"
      }
    }
  }

  rds_dev {
    profile = "slick.jdbc.PostgresProfile$"
    db = ${database.common}
    db {
      dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
      poolName = "aws_rds_test"
      numThreads = 4
      properties {
        serverName = "onlinecrm-deployment.c3oguoknq1nq.ap-northeast-1.rds.amazonaws.com"
        portNumber = 5432
        databaseName = "fbdb"
        user = "onlinecrm"
        password = "scalaocrm"
        applicationName = "OnlineCrm Crawler Mater"
      }
    }
  }
  rds_codegen {
    profile = "slick.jdbc.PostgresProfile$"
    db = ${database.common}
    db {
      dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
      poolName = "aws_rds_codegen"
      numThreads = 4
      properties {
        serverName = "onlinecrm-deployment.c3oguoknq1nq.ap-northeast-1.rds.amazonaws.com"
        portNumber = 5432
        databaseName = "codegen"
        user = "onlinecrm"
        password = "scalaocrm"
        applicationName = "OnlineCrm Crawler Mater"
      }
    }
  }

  jetcw_prod {
    profile = "slick.jdbc.PostgresProfile$"
    db = ${database.common}
    db {
      dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
      poolName = "gcp_prod"
      maxConnections = 3
      minConnections = 1
      numThreads = 3
      properties {
        serverName = "35.184.217.151"
        portNumber = 5432
        databaseName = "jetcw"
        user = "master"
        password = "c43f9bb29ce213dd2ae45c1a9e72ceb5"
        applicationName = "OnlineCrm Crawler Mater"
      }
    }
  }

  gcp_dev {
    profile = "slick.jdbc.PostgresProfile$"
    db = ${database.common}
    db {
      dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
      poolName = "gcp_dev"
      numThreads = 3
      properties {
        serverName = "104.199.119.211"
        portNumber = 5432
        databaseName = "onlinecrm"
        user = "onlinecrm"
        password = "scalaocrm"
        applicationName = "OnlineCrm Crawler Mater"
      }
    }
  }
}

db_target = ${database.jetcw_prod}